# University of Washington, Programming Languages, Homework 6, hw6runner.rb

class MyTetris < Tetris
  
  def set_board
    @canvas = TetrisCanvas.new
    @board = MyBoard.new(self)
    @canvas.place(@board.block_size * @board.num_rows + 3,
                  @board.block_size * @board.num_columns + 6, 24, 80)
    @board.draw
  end  
  
  def key_bindings  
    super
    @root.bind('u', proc {@board.flip})
    @root.bind('c', proc {@board.cheater})
  end
end


class MyPiece < Piece
  All_My_Pieces = All_Pieces +
                  [[[[-2, 0], [-1, 0], [0, 0], [1, 0], [2, 0]],               # 5-long (only needs two)
                   [[0, -2], [0, -1], [0, 0], [0, 1], [0, 2]]],
                   rotations([[0, 0], [-1, 0], [1, 0], [0, -1], [-1, -1]]),   # weid block-t
                   rotations([[0, 0], [1, 0], [0, -1]])]                      # short L
  
  Cheater_Block = [[[0, 0]]]

  def self.next_piece (board)
    if board.cheat
      board.cheat = false
      MyPiece.new(Cheater_Block, board)
    else 
      MyPiece.new(All_My_Pieces.sample, board)
    end
  end
end


class MyBoard < Board
  
  def initialize (game)
    super
    @current_block = MyPiece.next_piece(self)
    @cheat = false
  end
  
  attr_accessor :cheat  

  def flip
    if !game_over? and @game.is_running?
      @current_block.move(0, 0, -2)
    end
    draw
  end
  
  def cheater
    if !@cheat && @score >= 100
      @cheat = true
      @score -= 100 
      @game.update_score      
    end
    
  end
  
  def next_piece
    @current_block = MyPiece.next_piece(self)
    @current_pos = nil
  end
  
  def store_current
    locations = @current_block.current_rotation
    displacement = @current_block.position    
    size = locations.size - 1
    (0..size).each{|index| 
      current = locations[index];
      @grid[current[1]+displacement[1]][current[0]+displacement[0]] = 
      @current_pos[index]
    }
    remove_filled
    @delay = [@delay - 2, 80].max
  end
end
